(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{195:function(e,t,r){"use strict";r.r(t);var s=r(0),n=Object(s.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("p",[e._v("原文链接："),r("a",{attrs:{href:"https://hackernoon.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://hackernoon.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7"),r("OutboundLink")],1)]),e._v(" "),e._m(1),e._v(" "),r("p",[e._v("我们都知道 for 循环比for each或者 javascript 函数都要快，因为在 javascript 函数的框架下可能会使用 for 循环或者其他我不确定的东西。 我用一个对象数组做了一个简单的测试，并通过 for 循环 / foreach / javascript 函数执行了一些操作，并观察了执行所需的时间。")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),r("p",[e._v("注意：以下是结果列表,代码可以在"),r("a",{attrs:{href:"https://github.com/dg92/Performance-Analysis-JS",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),r("OutboundLink")],1),e._v("找到")]),e._v(" "),e._m(5),r("p",[e._v("所有的结果都清楚地表明 for 循环比 map / reduce / filter / find 更加熟练")]),e._v(" "),r("p",[e._v("Map / reduce / filter / Find 由于许多原因而变慢，其中一些原因是")]),e._v(" "),e._m(6),e._v(" "),r("blockquote",[r("p",[e._v("我找到了一个依赖"),r("a",{attrs:{href:"https://github.com/codemix/fast.js/tree/master",target:"_blank",rel:"noopener noreferrer"}},[e._v("lib"),r("OutboundLink")],1),e._v("，重新实现了几个常见的内置原生 JavaScript 函数")])]),e._v(" "),r("p",[e._v("但是，使用的选择不仅仅取决于性能，还有更多的因素需要考虑，其中一些是:")]),e._v(" "),e._m(7),e._v(" "),r("p",[e._v("就我个人而言，我喜欢 map, reduce, filter, find ，我使用他们很长时间了。 他们帮助我写的干净、精确、快速，并且符合我的思维过程。 当我别无选择时，我会使用 for 循环。 就优化而言，用 map / reduce / filter / find 来代替应该是最后一个选项，或者根据需要的优化级别而不能当作一个选项。")]),e._v(" "),e._m(8),e._v(" "),r("p",[e._v("更新: 在"),r("a",{attrs:{href:"https://github.com/dg92/Performance-Analysis-JS",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),r("OutboundLink")],1),e._v("你可以找到大数据集和海量计算的结果。")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),r("p",[e._v("注意：")]),e._v(" "),e._m(12),e._v(" "),r("p",[e._v("如果你喜欢这篇文章，请推荐和分享，帮助别人找到它")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"译：javascript-性能测试-for-对比-for-each-对比-map-reduce-filter-find"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#译：javascript-性能测试-for-对比-for-each-对比-map-reduce-filter-find","aria-hidden":"true"}},[this._v("#")]),this._v(" 译：Javascript 性能测试- for 对比 for each 对比 (map, reduce, filter, find).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"/mydairy/img/001.jpeg",alt:"Photo by Alex Holyoake on Unsplash"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("这些结果来自一些小示例，并且可能根据所执行的操作、选择的执行环境和选择的VM（virtual machine虚拟机）而有所不同。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_1-reduce-对比-for-loop-对比-foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-reduce-对比-for-loop-对比-foreach","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. Reduce 对比 for loop 对比 foreach")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// 计算upVotes的和\nconst posts = [ \n  {id: 1, upVotes: 2},\n  {id: 2, upVotes: 18}, \n  {id: 3, upVotes: 1}, \n  {id: 4, upVotes: 30}, \n  {id: 5, upVotes: 50} \n];\nlet sum = 0;\nconsole.time('reduce');\nsum = posts.reduce((s, p)=> s+=p.upVotes,0);\nconsole.timeEnd('reduce')\nsum = 0;\nconsole.time('for loop');\nfor(let i=0; i<posts.length; i++) {\n    sum += posts[i].upVotes;\n}\nconsole.timeEnd('for loop');\nsum = 0;\nconsole.time('for each');\nposts.forEach(element => {\n    sum += element.upVotes;\n});\nconsole.timeEnd('for each');\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//本机chrome结果\nreduce: 0.05322265625ms\nfor loop: 0.0390625ms\nfor each: 0.048095703125ms\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("它们有一个回调要执行，因而作为一个开销")]),this._v(" "),t("li",[this._v("js函数会考虑很多角落情况，比如 getter、稀疏数组和检查传递的参数是否是数组，这些都会增加开销")])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ol",[r("li",[e._v("代码的可读性和可维护性")]),e._v(" "),r("li",[e._v("简化代码")]),e._v(" "),r("li",[e._v("快速编码")]),e._v(" "),r("li",[e._v("实现与优化")]),e._v(" "),r("li",[e._v("个人选择")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意: 如果您使用 for 循环，总是以惯用方式使用它们，因为编译器现在足够智能，可以正确地优化惯用的循环")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("数组大小为5-1000的小数据集的结果\n"),t("img",{attrs:{src:"/mydairy/img/small_data_set_result.png",alt:"数组大小为5-1000的小数据集的结果"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("数组大小为3000-20000的中间数据集的结果\n"),t("img",{attrs:{src:"/mydairy/img/mid_data_set_result.png",alt:"数组大小为3000-20000的中间数据集的结果"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("数组大小为50000-1000000的大数据集的结果\n"),t("img",{attrs:{src:"/mydairy/img/large_data_set_result.png",alt:"数组大小为50000-1000000的大数据集的结果"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("这些结果是使用 Node V8 v5.8.283.41计算出来的")]),this._v(" "),t("li",[this._v("这些结果没有考虑 JIT、内联缓存、隐藏类、失效、垃圾收集、伪装等等")]),this._v(" "),t("li",[this._v("结果可能因环境不同而有所不同")]),this._v(" "),t("li",[this._v("上面图片中的红色高光仅供参考，很快就会改变")])])}],!1,null,null,null);t.default=n.exports}}]);